AWSTemplateFormatVersion: "2010-09-09"

Description: >
  AWS CloudFormation Sample Template Continuous Delievery: CI pipeline for a Sparta application

Parameters:
  PipelineName:
    Description: A name for pipeline
    Type: String
  GitHubOAuthToken: 
      Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
      Type: String
  GitHubUser:
      Description: GitHub username of the repository owner
      Type: String
  GitHubRepository:
      Description: GitHub repository name that should be monitored for changes
      Type: String
  GitHubBranch:
      Description: GitHub branch to monitored
      Type: String
      Default: master
  S3Bucket:
    Description: The name of the S3 bucket that contains the source artifact, which must be in the same region as this stack
    Type: String
  SourceS3Key:
    Default: SpartaCodePipeline.pipeline.zip
    Description: The file name of the source artifact, such as myfolder/myartifact.zip
    Type: String
  TemplateFileName:
    Default: cloudformation.json
    Description: The file name of the Sparta template
    Type: String
  TestStackName:
    Default: Test-MySpartaCodePipelineSite
    Description: A name for the test SpartaCodePipeline stack
    Type: String
  TestStackConfig:
    Default: test.json
    Description: The configuration file name for the test SpartaCodePipeline stack
    Type: String
  ProdStackName:
    Default: Prod-MySpartaCodePipelineSite
    Description: A name for the production SpartaCodePipeline stack
    Type: String
  ProdStackConfig:
    Default: production.json
    Description: The configuration file name for the production SpartaCodePipeline stack
    Type: String
  ChangeSetName:
    Default: UpdatePreview-MySpartaCodePipelineSite
    Description: A name for the production SpartaCodePipeline stack change set
    Type: String
  Email:
    Description: The email address where CodePipeline sends pipeline notifications
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitHub Source Settings"
        Parameters:
          - GitHubOAuthToken
          - GitHubUser
          - GitHubRepository
          - GitHubBranch
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - S3Bucket
          - SourceS3Key
          - Email
      - Label:
          default: "Test Stack Settings"
        Parameters:
          - TestStackName
          - TemplateFileName
          - TestStackConfig
      - Label:
          default: "Production Stack Settings"
        Parameters:
          - ChangeSetName
          - ProdStackName
          - ProdStackConfig

Resources:
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ ":", [ !Ref ApplicationName, "Pipeline" ] ]
      Description: Build the application
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/golang:1.7.3
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties: 
        Path: /
        RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
        AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codebuild.amazonaws.com" 
                        }
                    }]
                }
        Policies: 
            - PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
              PolicyDocument: !Sub |      
                    {
                        "Statement": [              
                            {
                                "Effect": "Allow",
                                "Resource": [ "*" ],
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Resource": [
                                    "arn:aws:s3:::${S3Bucket}/*"
                                ],
                                "Action": [
                                    "s3:GetObject",
                                    "s3:GetObjectVersion",
                                    "s3:PutObject"
                                ]
                            }
                        ]
                    }
# CodePipeline
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      DisableInboundStageTransitions: []
      Name: !Ref 'PipelineName'
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
                ActionTypeId:
                    Category: Source
                    Owner: ThirdParty
                    Version: 1
                    Provider: GitHub
                OutputArtifacts:
                    -  Name: Source
                Configuration:
                    Owner: !Ref GitHubUser
                    Repo: !Ref GitHubRepository
                    Branch: !Ref GitHubBranch
                    OAuthToken: !Ref GitHubOAuthToken
      - Name: Build
          Actions:
              - Name: CodeBuild
                InputArtifacts:
                    - Name: Source
                ActionTypeId: 
                    Category: Build
                    Owner: AWS
                    Version: 1
                    Provider: CodeBuild
                OutputArtifacts:
                    - Name: Built
                Configuration: 
                    ProjectName: !Ref CodeBuild

        - Name: S3Source
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref 'S3Bucket'
                S3ObjectKey: !Ref 'SourceS3Key'
              OutputArtifacts:
                - Name: TemplateSource
              RunOrder: '1'
        - Name: TestStage
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                Capabilities: CAPABILITY_IAM
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref TestStackName
                TemplateConfiguration: !Sub "TemplateSource::${TestStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: '1'
            - Name: ApproveTestStack
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'Do you want to create a change set against the production stack and delete the ${TestStackName} stack?'
              RunOrder: '2'
            - Name: DeleteTestStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref TestStackName
              RunOrder: '3'
        - Name: ProdStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                Capabilities: CAPABILITY_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref ProdStackName
                ChangeSetName: !Ref ChangeSetName
                TemplateConfiguration: !Sub "TemplateSource::${ProdStackConfig}"
                TemplatePath: !Sub "TemplateSource::${TemplateFileName}"
              RunOrder: '1'
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'A new change set was created for the ${ProdStackName} stack. Do you want to implement the changes?'
              RunOrder: '2'
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ChangeSetName
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref ProdStackName
              RunOrder: '3'
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'lambda:*'
                  - 'iam:*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 's3:Get*'
                Effect: Allow
                Resource: '*'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                Effect: Allow
                Resource: '*'